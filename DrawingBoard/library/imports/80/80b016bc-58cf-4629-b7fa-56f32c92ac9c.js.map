{"version":3,"sources":["../../../../assets/scripts/assets/scripts/main_scene.ts"],"names":[],"mappings":";;;;;AACA,+CAA0C;AAEpC,IAAA,kBAGW,EAFb,oBAAO,EACP,sBAAQ,CACM;AAElB,IAAM,QAAQ,GAAG,mDAAmD,CAAC;AACrE,IAAI,gBAAgB,GAAG,IAAI,CAAC;AAG5B;IAAuC,6BAAY;IADnD;QAAA,qEA6CC;QAzCG,eAAS,GAAY,IAAI,CAAC;QAG1B,mBAAa,GAAa,IAAI,CAAC;QAE/B,iBAAW,GAAa,IAAI,CAAC;;IAoCjC,CAAC;IAlCG,0BAAM,GAAN;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,WAAW,CAAa,CAAC;QAExE;;;;gCACuB,qBAAM,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAA;;4BAArD,gBAAgB,GAAG,SAAkC,CAAC;;;;;SACzD;QACD,IAAI,EAAE,CAAC;IACX,CAAC;IAED,iCAAa,GAAb;QACI,IAAI,gBAAgB,IAAI,IAAI,EAAE;YAC1B,EAAE,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACvC,OAAO;SACV;QACD,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,UAAU,GAAG,WAAW,CAAC,aAAa,EAAE,CAAC;QAC7C,IAAI,MAAM,GAAG,mBAAS,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QAC9D,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5C,IAAI,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAC5C,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAClC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAE9B,IAAI,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjD,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,MAAM,CAAC;QACX,WAAW,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;YAC1B,IAAI,IAAI,GAAG,OAAO,EAAE;gBAChB,OAAO,GAAG,IAAc,CAAC;gBACzB,MAAM,GAAG,GAAG,CAAC;aAChB;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;IACvC,CAAC;IAxCD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;gDACQ;IAG1B;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;oDACY;IANd,SAAS;QAD7B,OAAO;OACa,SAAS,CA4C7B;IAAD,gBAAC;CA5CD,AA4CC,CA5CsC,EAAE,CAAC,SAAS,GA4ClD;kBA5CoB,SAAS","file":"","sourceRoot":"../../../../assets/scripts","sourcesContent":["import DrawNode from \"./draw_node\";\nimport PixelUtil from \"./utils/PixelUtil\";\n\nconst {\n    ccclass,\n    property\n} = cc._decorator;\n\nconst modelUrl = 'http://127.0.0.1:8080/tensorflow_model/model.json';\nlet tensorflow_model = null;\n\n@ccclass\nexport default class MainScene extends cc.Component {\n\n    @property(cc.Node)\n    draw_node: cc.Node = null;\n\n    @property(cc.Label)\n    resutlt_label: cc.Label = null;\n\n    drawNodeScr: DrawNode = null;\n\n    onLoad() {\n        this.drawNodeScr = this.draw_node.getComponent('draw_node') as DrawNode;\n\n        async function load() {\n            tensorflow_model = await tf.loadLayersModel(modelUrl);\n        }\n        load();\n    }\n\n    runTensorflow() {\n        if (tensorflow_model == null) {\n            cc.error('tensorflow_model is null !');\n            return;\n        }\n        let drawNodeScr = this.drawNodeScr;\n        let pixelsData = drawNodeScr.getPixelsData();\n        let pixels = PixelUtil.convertToUint8ClampedArray(pixelsData);\n        let imgData = new ImageData(pixels, 28, 28);\n        let img = tf.browser.fromPixels(imgData, 1);\n        img = img.reshape([1, 28, 28, 1]);\n        img = tf.cast(img, 'float32');\n\n        let predict = tensorflow_model.predict(img);\n        let predictions = Array.from(predict.dataSync());\n        let maxProb = 0;\n        let number;\n        predictions.forEach((prob, num) => {\n            if (prob > maxProb) {\n                maxProb = prob as number;\n                number = num;\n            }\n        });\n        this.resutlt_label.string = number;\n    }\n}"]}