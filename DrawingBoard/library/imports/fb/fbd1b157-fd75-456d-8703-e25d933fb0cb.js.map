{"version":3,"sources":["../../../../../assets/scripts/utils/assets/scripts/utils/PixelUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/scripts/utils","sourcesContent":["//目标图像尺寸\nconst judgeSize = new cc.Size(28, 28);\n\nclass PixelUtil {\n    static judegSize = new cc.Size(28, 28);\n    constructor() {\n\n    }\n\n    //翻转图像y轴\n    filpYImage(data: Uint8Array, size: cc.Size): Uint8Array {\n        let width = size.width;\n        let height = size.height;\n        let picData = new Uint8Array(width * height * 4);\n        let idx = 0;\n        for (let row = height - 1; row >= 0; --row) {\n            for (let col = 0; col < width * 4; ++col) {\n                picData[idx++] = data[row * width * 4 + col];\n            }\n        }\n        return picData;\n    }\n\n    /**\n     * \n     * @param pixelsData 像素数据\n     * @param size 像素数据size\n     */\n    scalePixels(pixelsData: Uint8Array, size: cc.Size): Array < number > {\n        let width = size.width;\n        let height = size.height;\n\n        let pixels = pixelsData;\n\n        //像素缩放\n        let scaleX = Math.floor(width / (judgeSize.width - 1));\n        let scaleY = Math.floor(height / (judgeSize.height - 1));\n        let outputData = [];\n\n        for (let row = 0; row < judgeSize.height; ++row) {\n            for (let col = 0; col < judgeSize.width; ++col) {\n                let toRow = row * scaleY * width * 4;\n                let toCol = col * scaleX * 4;\n                outputData.push(pixels[toRow + toCol + 0]);\n                outputData.push(pixels[toRow + toCol + 1]);\n                outputData.push(pixels[toRow + toCol + 2]);\n                outputData.push(pixels[toRow + toCol + 3]);\n            }\n        }\n        return outputData;\n    }\n\n    /**\n     * 转换到指定尺寸灰度图\n     * @param pixelsData 像素数据\n     * @param dataSize 像素数据size\n     * @param targetSize 转换目标size\n     */\n    grayPixels(pixelsData: Uint8Array, dataSize: cc.Size, targetSize: cc.Size) {\n        let width = dataSize.width;\n        let height = dataSize.height;\n        //灰度化\n        let pixels = pixelsData;\n        let grayData = [];\n        for (let i = 0; i < pixels.length; i += 4) {\n            let r = pixels[i];\n            let g = pixels[i + 1];\n            let b = pixels[i + 2];\n            let gray = (r * 30 + g * 59 + b * 11) / 100;\n            grayData.push(gray);\n        }\n\n        //缩放\n        let scaleX = Math.floor(width / (targetSize.width - 1));\n        let scaleY = Math.floor(height / (targetSize.height - 1));\n        let outputData = [];\n\n        for (let row = 0; row < targetSize.height; ++row) {\n            for (let col = 0; col < judgeSize.width; ++col) {\n                let toRow = row * scaleY * width;\n                let toCol = col * scaleX;\n                outputData.push(pixels[toRow + toCol]);\n            }\n        }\n        return outputData;\n    }\n\n    /**\n     * 将数组转为Uint8ClampedArray\n     * @param data 数组\n     */\n    convertToUint8ClampedArray(data): Uint8ClampedArray {\n        let u8carr = new Uint8ClampedArray(data.length);\n        for (let i = 0; i < data.length; ++i) {\n            u8carr[i] = data[i + 1];\n        }\n        return u8carr\n    }\n}\n\nexport default new PixelUtil();"]}