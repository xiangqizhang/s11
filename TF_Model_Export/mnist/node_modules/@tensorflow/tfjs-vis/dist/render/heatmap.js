"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tfjs_1 = require("@tensorflow/tfjs");
const vega_embed_1 = __importDefault(require("vega-embed"));
const utils_1 = require("../util/utils");
const render_utils_1 = require("./render_utils");
function heatmap(container, data, opts = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = Object.assign({}, defaultOpts, opts);
        const drawArea = render_utils_1.getDrawArea(container);
        const values = [];
        const { xTickLabels, yTickLabels } = data;
        if (data.values instanceof tfjs_1.Tensor) {
            utils_1.assert(data.values.rank === 2, 'Input to renderHeatmap must be a 2d array or Tensor2d');
            const shape = data.values.shape;
            if (xTickLabels) {
                utils_1.assert(shape[0] === xTickLabels.length, `Length of xTickLabels (${xTickLabels.length}) must match number of rows
          (${shape[0]})`);
            }
            if (yTickLabels) {
                utils_1.assert(shape[1] === yTickLabels.length, `Length of yTickLabels (${yTickLabels.length}) must match number of columns
          (${shape[1]})`);
            }
            const inputArray = yield data.values.data();
            const [numRows, numCols] = shape;
            for (let row = 0; row < numRows; row++) {
                const x = xTickLabels ? xTickLabels[row] : row;
                for (let col = 0; col < numCols; col++) {
                    const y = yTickLabels ? yTickLabels[col] : col;
                    const index = (row * numCols) + col;
                    const value = inputArray[index];
                    values.push({ x, y, value });
                }
            }
        }
        else {
            if (xTickLabels) {
                utils_1.assert(data.values.length === xTickLabels.length, `Number of rows (${data.values.length}) must match
          number of xTickLabels (${xTickLabels.length})`);
            }
            const inputArray = data.values;
            for (let row = 0; row < inputArray.length; row++) {
                const x = xTickLabels ? xTickLabels[row] : row;
                if (yTickLabels) {
                    utils_1.assert(data.values[row].length === yTickLabels.length, `Number of columns in row ${row} (${data.values[row].length})
            must match length of yTickLabels (${yTickLabels.length})`);
                }
                for (let col = 0; col < inputArray[row].length; col++) {
                    const y = yTickLabels ? yTickLabels[col] : col;
                    const value = inputArray[row][col];
                    values.push({ x, y, value });
                }
            }
        }
        const embedOpts = {
            actions: false,
            mode: 'vega-lite',
            defaultStyle: false,
        };
        const spec = {
            'width': options.width || drawArea.clientWidth,
            'height': options.height || drawArea.clientHeight,
            'padding': 0,
            'autosize': {
                'type': 'fit',
                'contains': 'padding',
                'resize': true,
            },
            'config': {
                'axis': {
                    'labelFontSize': options.fontSize,
                    'titleFontSize': options.fontSize,
                },
                'text': { 'fontSize': options.fontSize },
                'legend': {
                    'labelFontSize': options.fontSize,
                    'titleFontSize': options.fontSize,
                },
                'scale': { 'bandPaddingInner': 0, 'bandPaddingOuter': 0 },
            },
            'data': { 'values': values },
            'mark': 'rect',
            'encoding': {
                'x': {
                    'field': 'x',
                    'type': options.xType,
                    'scale': { 'domain': xTickLabels },
                    'title': options.xLabel,
                },
                'y': {
                    'field': 'y',
                    'type': options.yType,
                    'scale': { 'domain': yTickLabels },
                    'title': options.yLabel,
                },
                'fill': {
                    'field': 'value',
                    'type': 'quantitative',
                },
            }
        };
        let colorRange;
        switch (options.colorMap) {
            case 'blues':
                colorRange = ['#f7fbff', '#4292c6'];
                break;
            case 'greyscale':
                colorRange = ['#000000', '#ffffff'];
                break;
            case 'viridis':
            default:
                colorRange = 'viridis';
                break;
        }
        if (colorRange !== 'viridis') {
            const fill = spec.encoding.fill;
            fill.scale = { 'range': colorRange };
        }
        if (options.domain) {
            const fill = spec.encoding.fill;
            if (fill.scale != null) {
                fill.scale = Object.assign({}, fill.scale, { 'domain': options.domain });
            }
            else {
                fill.scale = { 'domain': options.domain };
            }
        }
        yield vega_embed_1.default(drawArea, spec, embedOpts);
    });
}
exports.heatmap = heatmap;
const defaultOpts = {
    xLabel: null,
    yLabel: null,
    xType: 'ordinal',
    yType: 'ordinal',
    colorMap: 'viridis',
    fontSize: 12,
    domain: null,
};
//# sourceMappingURL=heatmap.js.map