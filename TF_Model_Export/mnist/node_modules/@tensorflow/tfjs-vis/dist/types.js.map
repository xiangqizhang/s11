{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;AAuFA,SAAgB,aAAa,CAAC,QAAkB;IAC9C,IAAK,QAAwB,CAAC,IAAI,IAAI,IAAI,EAAE;QAC1C,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AALD,sCAKC;AAED,SAAgB,SAAS,CAAC,QAAkB;IAC1C,IAAK,QAAoB,CAAC,QAAQ,YAAY,WAAW,EAAE;QACzD,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AALD,8BAKC","sourcesContent":["import {Tensor2D} from '@tensorflow/tfjs';\n\n/*\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Types shared across the project and that users will commonly interact with\n\n/**\n * The public api of a 'surface'\n */\nexport interface Surface {\n  /**\n   * The containing HTML element for this surface\n   */\n  container: HTMLElement;\n\n  /**\n   * A textual label for the surface.\n   */\n  label: HTMLElement;\n\n  /**\n   * A container for plots and other renderings\n   */\n  drawArea: HTMLElement;\n}\n\n/**\n * Options used to specify a surface.\n *\n * name and tab are also used for retrieval of a surface instance.\n */\nexport interface SurfaceInfo {\n  /**\n   * The name / label of this surface\n   */\n  name: string;\n\n  /**\n   * The name of the tab this surface should appear on\n   */\n  tab?: string;\n\n  /**\n   * Display Styles for the surface\n   */\n  styles?: StyleOptions;\n}\n\n/**\n * Internally all surfaces must have a tab.\n */\nexport interface SurfaceInfoStrict extends SurfaceInfo {\n  name: string;\n  tab: string;\n  styles?: StyleOptions;\n}\n\n/**\n * Style properties are generally optional as components will specify defaults.\n */\nexport type StyleOptions = Partial<CSSOptions>;\nexport interface CSSOptions {\n  width: string;\n  height: string;\n  maxWidth: string;\n  maxHeight: string;\n}\n\nexport type Drawable = HTMLElement|Surface|SurfaceInfo|{\n  drawArea: HTMLElement;\n};\n\nexport function isSurfaceInfo(drawable: Drawable): drawable is SurfaceInfo {\n  if ((drawable as SurfaceInfo).name != null) {\n    return true;\n  }\n  return false;\n}\n\nexport function isSurface(drawable: Drawable): drawable is Surface {\n  if ((drawable as Surface).drawArea instanceof HTMLElement) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Common visualisation options for '.render' functions.\n */\nexport interface VisOptions {\n  width?: number;\n  height?: number;\n  xLabel?: string;\n  yLabel?: string;\n  xType?: 'quantitative'|'ordinal'|'nominal';\n  yType?: 'quantitative'|'ordinal'|'nominal';\n  fontSize?: number;\n}\n\n/**\n * Options for XY plots\n */\nexport interface XYPlotOptions extends VisOptions {\n  xAxisDomain?: [number, number];\n  yAxisDomain?: [number, number];\n  zoomToFit?: boolean;\n}\n\n/**\n * Histogram options.\n */\nexport type HistogramOpts = VisOptions&{\n  stats?: HistogramStats|false;\n  maxBins?: number;\n};\n\n/**\n * Summary statistics for histogram.\n */\nexport interface HistogramStats {\n  numVals?: number;\n  min?: number;\n  max?: number;\n  numNans?: number;\n  numZeros?: number;\n  numInfs?: number;\n}\n\n/**\n * Type alias for typed arrays\n */\nexport type TypedArray = Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|\n    Uint32Array|Uint8ClampedArray|Float32Array|Float64Array;\n\n/**\n * Data format for confusion matrix\n */\nexport interface ConfusionMatrixData {\n  values: number[][];\n  tickLabels?: string[];\n}\n\n/**\n * Datum format for scatter and line plots\n */\nexport type Point2D = {\n  x: number; y: number;\n};\n\n/**\n * Data format for confusion matrix\n */\nexport interface HeatmapData {\n  values: number[][]|Tensor2D;\n  xTickLabels?: string[];\n  yTickLabels?: string[];\n}\n\n/**\n * Color map names.\n *\n * Currently supported by heatmap\n */\nexport type NamedColorMap = 'greyscale'|'viridis'|'blues';\n\n/**\n * Visualization options for Heatmap\n */\nexport interface HeatmapOptions extends VisOptions {\n  colorMap?: NamedColorMap;\n  domain?: number[];\n}\n"]}